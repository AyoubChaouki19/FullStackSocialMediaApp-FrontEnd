{"ast":null,"code":"var _jsxFileName = \"/Users/salmaelkasri/Desktop/postapp/client/src/pages/Post.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Post() {\n  _s();\n  let {\n    id\n  } = useParams();\n  const [listComment, setComments] = useState([]);\n  const [postObject, setPostObject] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const postResponse = await axios.get(`http://localhost:3004/posts/byId/${id}`);\n        setPostObject(postResponse.data);\n        const commentsResponse = await axios.get(`http://localhost:3004/comments/${id}`);\n        setComments(commentsResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching data\", error);\n      }\n    };\n    fetchData();\n  }, [id]); // by including [id] in the dependency array you achieve the preveting from unnecessary requests.\n  const userComment = {\n    commentBody: \"\",\n    PostId: id\n  };\n  const validationSchema = Yup.object().shape({\n    commentBody: Yup.string().required()\n  });\n  const addCommentSubmit = async (data, {\n    resetForm\n  }) => {\n    axios.post(\"http://localhost:3004/comments\", data, {\n      headers: {}\n    }).then(response => {\n      resetForm();\n      const commentToAdd = {\n        commentBody: data.commentBody\n      };\n      setComments([...listComment, commentToAdd]);\n    });\n  };\n  return (\n    /*#__PURE__*/\n    //basic html code\n    _jsxDEV(\"div\", {\n      className: \"pagePost\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postOnPostPage\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upperPost\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"postData\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"title\",\n                children: postObject.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"username\",\n                children: postObject.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postText\",\n            children: postObject.postText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }, this), postObject && postObject.createdAt && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time\",\n            children: postObject.createdAt.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"commentSection\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, this), listComment.map((value, key) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: value.commentBody\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"addComment\",\n            children: /*#__PURE__*/_jsxDEV(Formik, {\n              initialValues: userComment,\n              onSubmit: addCommentSubmit,\n              validationSchema: validationSchema,\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"commentForm\",\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    id: \"inputComment\",\n                    name: \"commentBody\",\n                    placeholder: \"Comment on post...\",\n                    autocomplete: \"off\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    children: \"Publish\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Post, \"5tdsbH1PTqYpGAVcMNLeIMAhX9s=\", false, function () {\n  return [useParams];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useParams","axios","useState","useEffect","Formik","Form","Field","Yup","jsxDEV","_jsxDEV","Post","_s","id","listComment","setComments","postObject","setPostObject","fetchData","postResponse","get","data","commentsResponse","error","console","userComment","commentBody","PostId","validationSchema","object","shape","string","required","addCommentSubmit","resetForm","post","headers","then","response","commentToAdd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","username","postText","createdAt","slice","map","value","key","initialValues","onSubmit","name","placeholder","autocomplete","type","_c","$RefreshReg$"],"sources":["/Users/salmaelkasri/Desktop/postapp/client/src/pages/Post.js"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nfunction Post() {\n  let { id } = useParams();\n  const [listComment, setComments] = useState([]);\n  const [postObject, setPostObject] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const postResponse = await axios.get(\n          `http://localhost:3004/posts/byId/${id}`\n        );\n        setPostObject(postResponse.data);\n        const commentsResponse = await axios.get(\n          `http://localhost:3004/comments/${id}`\n        );\n        setComments(commentsResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching data\", error);\n      }\n    };\n    fetchData();\n  }, [id]); // by including [id] in the dependency array you achieve the preveting from unnecessary requests.\n  const userComment = {\n    commentBody: \"\",\n    PostId: id,\n  };\n  const validationSchema = Yup.object().shape({\n    commentBody: Yup.string().required(),\n  });\n  const addCommentSubmit = async (data, { resetForm }) => {\n    axios.post(\"http://localhost:3004/comments\", data , {headers:{}}).then((response) => {\n      resetForm();\n      const commentToAdd = { commentBody: data.commentBody };\n      setComments([...listComment, commentToAdd]);\n    });\n  };\n  return (\n    //basic html code\n    <div className=\"pagePost\">\n      <div className=\"postContainer\">\n        <div className=\"postOnPostPage\">\n          <div className=\"upperPost\">\n            <div>\n              <span className=\"image\"></span>\n            </div>\n            <div className=\"postData\">\n              <div className=\"title\">{postObject.title}</div>\n              <div className=\"username\">{postObject.username}</div>\n            </div>\n          </div>\n          <div className=\"postText\">{postObject.postText}</div>\n          {postObject && postObject.createdAt && (\n            <div className=\"time\">{postObject.createdAt.slice(0, 10)}</div>\n          )}\n        </div>\n        <div className=\"commentSection\">\n          <div className=\"comments\">\n            <p>Comments</p>\n            {listComment.map((value, key) => {\n              return (\n                <div className=\"comment\">\n                  <div key={key}>{value.commentBody}</div>\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"addComment\">\n            <Formik\n              initialValues={userComment}\n              onSubmit={addCommentSubmit}\n              validationSchema={validationSchema}\n            >\n              <Form>\n                <div className=\"commentForm\">\n                  <Field\n                    id=\"inputComment\"\n                    name=\"commentBody\"\n                    placeholder=\"Comment on post...\"\n                    autocomplete=\"off\"\n                  />\n                  <button type=\"submit\">Publish</button>\n                </div>\n              </Form>\n            </Formik>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Post;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}