{"ast":null,"code":"var _jsxFileName = \"/Users/salmaelkasri/Desktop/postapp/client/src/pages/Post.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Post() {\n  _s();\n  let {\n    id\n  } = useParams();\n  const [listComment, setComments] = useState([]);\n  const [postObject, setPostObject] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const postResponse = await axios.get(`http://localhost:3004/posts/byId/${id}`);\n        setPostObject(postResponse.data);\n        const commentsResponse = await axios.get(`http://localhost:3004/comments/${id}`);\n        setComments(commentsResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching data\", error);\n      }\n    };\n    fetchData();\n  }, [id]); // by including [id] in the dependency array you achieve the preveting from unnecessary requests.\n  const userComment = {\n    commentBody: \"\",\n    PostId: id\n  };\n  const validationSchema = Yup.object().shape({\n    commentBody: Yup.string().required()\n  });\n  const addCommentSubmit = async (data, {\n    resetForm\n  }) => {\n    axios.post(\"http://localhost:3004/comments\", data).then(response => {\n      resetForm();\n      const commentToAdd = {\n        commentBody: data.commentBody\n      };\n      setComments([...listComment, commentToAdd]);\n    });\n  };\n  return (\n    /*#__PURE__*/\n    //basic html code\n    _jsxDEV(\"div\", {\n      className: \"pagePost\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postOnPostPage\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upperPost\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"postData\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"title\",\n                children: postObject.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"username\",\n                children: postObject.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"postText\",\n            children: postObject.postText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 9\n          }, this), postObject && postObject.createdAt && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time\",\n            children: postObject.createdAt.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"commentSection\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comments\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Comments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 9\n            }, this), listComment.map((value, key) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"comment\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: value.commentBody\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 16\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"dateOfComment\",\n                  children: value.createdAt.slice(0, 10)\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 12\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"addComment\",\n            children: /*#__PURE__*/_jsxDEV(Formik, {\n              initialValues: userComment,\n              onSubmit: addCommentSubmit,\n              validationSchema: validationSchema,\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                className: \"commentForm\",\n                children: [/*#__PURE__*/_jsxDEV(Field, {\n                  id: \"inputComment\",\n                  name: \"commentBody\",\n                  placeholder: \"Comment on post...\",\n                  autocomplete: \"off\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  children: \"Publish\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Post, \"5tdsbH1PTqYpGAVcMNLeIMAhX9s=\", false, function () {\n  return [useParams];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useParams","axios","useState","useEffect","Formik","Form","Field","Yup","jsxDEV","_jsxDEV","Post","_s","id","listComment","setComments","postObject","setPostObject","fetchData","postResponse","get","data","commentsResponse","error","console","userComment","commentBody","PostId","validationSchema","object","shape","string","required","addCommentSubmit","resetForm","post","then","response","commentToAdd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","username","postText","createdAt","slice","map","value","key","initialValues","onSubmit","name","placeholder","autocomplete","type","_c","$RefreshReg$"],"sources":["/Users/salmaelkasri/Desktop/postapp/client/src/pages/Post.js"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nfunction Post() {\n  let { id } = useParams();\n  const [listComment, setComments] = useState([]);\n  const [postObject, setPostObject] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const postResponse = await axios.get(\n          `http://localhost:3004/posts/byId/${id}`\n        );\n        setPostObject(postResponse.data);\n        const commentsResponse = await axios.get(\n          `http://localhost:3004/comments/${id}`\n        );\n        setComments(commentsResponse.data);\n      } catch (error) {\n        console.error(\"Error fetching data\", error);\n      }\n    };\n    fetchData();\n  }, [id]); // by including [id] in the dependency array you achieve the preveting from unnecessary requests.\n  const userComment = {\n    commentBody: \"\",\n    PostId: id,\n  };\n  const validationSchema = Yup.object().shape({\n    commentBody: Yup.string().required(),\n  });\n  const addCommentSubmit = async (data, { resetForm }) => {\n    axios.post(\"http://localhost:3004/comments\", data).then((response) => {\n      resetForm();\n      const commentToAdd = { commentBody: data.commentBody };\n      setComments([...listComment, commentToAdd]);\n    });\n  };\n  return (\n    //basic html code\n    <div className=\"pagePost\">\n      <div className=\"postContainer\">\n      <div className=\"postOnPostPage\">\n        <div className=\"upperPost\">\n          <div>\n            <span className=\"image\"></span>\n          </div>\n          <div className=\"postData\">\n            <div className=\"title\">{postObject.title}</div>\n            <div className=\"username\">{postObject.username}</div>\n          </div>\n        </div>\n        <div className=\"postText\">{postObject.postText}</div>\n        {postObject && postObject.createdAt && (\n          <div className=\"time\">{postObject.createdAt.slice(0, 10)}</div>\n        )}\n      </div>\n      <div className=\"commentSection\">\n        <div className=\"comments\">\n        <p>Comments</p>\n          {listComment.map((value, key) => {\n            return (\n           <div className=\"comment\">\n               <div key={key}>\n                {value.commentBody}\n              </div>\n              <div key={key} className=\"dateOfComment\">\n                {value.createdAt.slice(0,10)}\n              </div>\n           </div>\n            );\n          })}\n        </div>\n        <div className=\"addComment\">\n          <Formik\n            initialValues={userComment}\n            onSubmit={addCommentSubmit}\n            validationSchema={validationSchema}\n          >\n            <Form className=\"commentForm\">\n              <Field\n                id=\"inputComment\"\n                name=\"commentBody\"\n                placeholder=\"Comment on post...\"\n                autocomplete=\"off\"\n              />\n              <button type=\"submit\">Publish</button>\n            </Form>\n          </Formik>\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n}\nexport default Post;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}